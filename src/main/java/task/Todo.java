package task;

import util.Parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * Type of Task that stores a task with no deadline.
 */
public class Todo extends Task {
    public static final String COMMAND_STRING = "todo";

    /**
     * Constructs a Todo with the supplied description.
     *
     * @param description String description of the Todo.
     */
    public Todo(String description) {
        super(description);
    }

    /**
     * Overloaded constructor to create a Deadline with the supplied description
     * and completion status.
     *
     * @param description String description of the Todo.
     * @param isDone True, if the Todo should be initialised as done.
     */
    public Todo(String description, boolean isDone) {
        super(description, isDone);
    }

    /**
     * Parses the saveString generated by toSaveString() back into a Todo object.
     *
     * @param saveString String representation of a Todo object.
     * @return Todo object based on the supplied saveString.
     */
    public static Todo fromSaveString(String saveString) throws IOException {
        HashMap<String, List<String>> commandMap = Parser.parseCommandMap(saveString);

        // Attempt to parse the description
        List<String> descriptions;
        String description;
        try {
            descriptions = commandMap.get(COMMAND_STRING);
            description = String.join(" ", descriptions);
        } catch (NullPointerException e) {
            throw new IOException("Description could not be parsed from: " + saveString);
        }

        boolean isDone = commandMap.containsKey("done");
        return new Todo(description, isDone);
    }

    @Override
    public String toString() {
        return "[T]" + super.toString();
    }

    @Override
    public TaskType getTaskType() {
        return TaskType.TODO;
    }

    @Override
    public String getCommandString() {
        return COMMAND_STRING;
    }

    /**
     * Convert the Todo, its state and variables to a String representation
     * that can be parsed to obtain back the same Todo.
     *
     * @return String representation of the Todo and its state.
     */
    @Override
    public String toSaveString() {
        HashMap<String, List<String>> commandMap = new HashMap<>();

        // Add command flag
        commandMap.put(Parser.COMMAND_FLAG, new ArrayList<>());
        commandMap.get(Parser.COMMAND_FLAG).add(getCommandString());

        // Add description
        commandMap.put(getCommandString(), new ArrayList<>());
        commandMap.get(getCommandString()).add(super.getDescription());

        // Add done flag
        if (super.isDone()) {
            commandMap.put("done", new ArrayList<>());
        }

        return Parser.commandMapToString(commandMap);
    }

}
