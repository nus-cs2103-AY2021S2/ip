package duke.parser;

import duke.taskclass.DeadlineTask;
import duke.taskclass.EventTask;
import duke.taskclass.Task;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Parser {

    public Tuple2<Integer, String> parseInput(String input, Task[] tasks, int taskIterator) {
        String[] inputArr = input.split(" ", 2);
        String command = inputArr[0];
        Tuple2 results = new Tuple2();
        results.setInteger(taskIterator);

        try {
            switch (command) {
            case "bye":
                results = byeCase(taskIterator);
                break;
            case "list":
                results = listCase(taskIterator, tasks);
                break;
            case "done":
                results = doneCase(taskIterator, tasks, inputArr[1]);
                break;
            case "todo":
            case "event":
            case "deadline":
                // add to list
                String[] inputArrTasks = input.split("/", 2);
                String[] firstHalf = inputArrTasks[0].split(" ", 2);
                if (inputArrTasks.length != 1) {
                    // create Deadline/Event
                    String[] secondHalf = inputArrTasks[1].split(" ", 2);
                    if (validator.isValid(secondHalf[1])) {
                        Date date = new SimpleDateFormat("d/MM/yyyy HHmm").parse(secondHalf[1]);
                        if (inputArr[0].equals("event")) {
                            tasks[taskIterator] = new EventTask(firstHalf[1], false, secondHalf[1].trim(), date);
                        } else if (inputArr[0].equals("deadline")) {
                            tasks[taskIterator] = new DeadlineTask(firstHalf[1], false, secondHalf[1].trim(), date);
                        }
                    } else {
                        System.out.println("Invalid date format for timed Task");
                    }
                } else {
                    // create todoTask
                    if (firstHalf.length == 1) {
                        throw new Parser.MissingTodoDescriptorException("------------------------------------\n"
                                + ":( OOPS!!! The description of a todo cannot be empty\n"
                                + "------------------------------------");
                    } else {
                        tasks[taskIterator] = new Task(firstHalf[1], false);
                    }
                }
                taskIterator = taskIterator + 1;
                results = new Tuple2(taskIterator,
                        ui.addTaskMessage(tasks[taskIterator - 1].toFormattedString(), taskIterator));
                break;
            case "delete":
                int removeIndex = Integer.parseInt(inputArr[1]);
                taskIterator = taskIterator - 1; // reduce task count in list
                Task removedTask = tasks[removeIndex - 1];
                for (int i = removeIndex - 1; i < tasks.length - 1; i++) {
                    tasks[i] = tasks[i + 1];
                }
                results = new Tuple2(taskIterator, ui.deleteTaskMessage(removedTask.toFormattedString(), taskIterator));
                break;
            case "find":
                String toFind = inputArr[1];
                String output = "Here are the matching tasks in your list:\n";
                for (Task t : tasks) {
                    if (t != null) {
                        if (t.getTaskName().contains(toFind)) {
                            output = output + t.toFormattedString() + "\n";
                        }
                    }
                }
                results = new Tuple2(taskIterator, ui.formatBox(output));
                break;
            default:
                throw new Parser.UnknownInputParamException("------------------------------------\n"
                        + ":( OOPS!!! I'm sorry, but I don't know what that means :-(\n"
                        + "------------------------------------");
            }
        } catch (Parser.UnknownInputParamException e) {
            System.out.println(e.getMessage());
        } catch (ParseException e) {
            System.out.println(e.getMessage());
        }
    }
